{
  "version": 3,
  "sources": ["../src/connection-manager.ts"],
  "sourcesContent": ["import type { AbstractConnection, ConnectionOptions } from '@sequelize/core';\nimport {\n  AbstractConnectionManager,\n  AccessDeniedError,\n  ConnectionError,\n  ConnectionRefusedError,\n  HostNotFoundError,\n  HostNotReachableError,\n  InvalidConnectionError,\n} from '@sequelize/core';\nimport { isErrorWithStringCode } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/check.js';\nimport { timeZoneToOffsetString } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/dayjs.js';\nimport { logger } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/logger.js';\nimport { removeUndefined } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/object.js';\nimport * as MariaDb from 'mariadb';\nimport semver from 'semver';\nimport type { MariaDbDialect } from './dialect.js';\n\nconst debug = logger.debugContext('connection:mariadb');\n\nexport type MariaDbModule = typeof MariaDb;\n\nexport interface MariaDbConnection extends AbstractConnection, MariaDb.Connection {}\n\nexport interface MariaDbConnectionOptions\n  extends Omit<\n    MariaDb.ConnectionConfig,\n    // Can only be set by Sequelize to prevent users from making it return a format\n    // that is incompatible with Sequelize\n    | 'typeCast'\n    // Replaced by Sequelize's global option\n    | 'timezone'\n    // Users cannot use MariaDB's placeholders, they use Sequelize's syntax instead\n    | 'namedPlaceholders'\n    | 'arrayParenthesis'\n\n    // The following options will conflict with the format expected by Sequelize\n    | 'insertIdAsNumber'\n    | 'metaAsArray'\n    | 'rowsAsArray'\n    | 'nestTables'\n    | 'dateStrings'\n    | 'decimalAsNumber'\n    | 'bigIntAsNumber'\n    | 'supportBigNumbers'\n    | 'bigNumberStrings'\n    | 'autoJsonMap'\n    // This option is not necessary because we do not allow using decimalAsNumber,\n    // insertIdAsNumber, nor bigIntAsNumber.\n    // If someone requests to enable this option, do not accept it.\n    // Instead, the same feature should be added to Sequelize as a cross-dialect feature.\n    | 'checkNumberRange'\n    // unsafe compatibility option\n    | 'permitSetMultiParamEntries'\n  > {}\n\n/**\n * MariaDB Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MariaDB specific connections\n * Use https://github.com/MariaDB/mariadb-connector-nodejs to connect with MariaDB server\n */\nexport class MariaDbConnectionManager extends AbstractConnectionManager<\n  MariaDbDialect,\n  MariaDbConnection\n> {\n  readonly #lib: MariaDbModule;\n\n  constructor(dialect: MariaDbDialect) {\n    super(dialect);\n    this.#lib = dialect.options.mariaDbModule ?? MariaDb;\n  }\n\n  #typeCast(field: MariaDb.FieldInfo, next: MariaDb.TypeCastNextFunction): MariaDb.TypeCastResult {\n    const parser = this.dialect.getParserForDatabaseDataType(field.type);\n\n    if (parser) {\n      return parser(field) as MariaDb.TypeCastResult;\n    }\n\n    return next();\n  }\n\n  /**\n   * Connect with MariaDB database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param config\n   */\n  async connect(config: ConnectionOptions<MariaDbDialect>): Promise<MariaDbConnection> {\n    // Named timezone is not supported in mariadb, convert to offset\n    let tzOffset = this.sequelize.options.timezone;\n    tzOffset = tzOffset.includes('/') ? timeZoneToOffsetString(tzOffset) : tzOffset;\n\n    const connectionConfig: MariaDb.ConnectionConfig = removeUndefined({\n      foundRows: false,\n      ...config,\n      timezone: tzOffset,\n      typeCast: (field: MariaDb.FieldInfo, next: MariaDb.TypeCastNextFunction) =>\n        this.#typeCast(field, next),\n    });\n\n    if (!this.sequelize.options.keepDefaultTimezone) {\n      // set timezone for this connection\n      if (connectionConfig.initSql) {\n        if (!Array.isArray(connectionConfig.initSql)) {\n          connectionConfig.initSql = [connectionConfig.initSql];\n        }\n\n        connectionConfig.initSql.push(`SET time_zone = '${tzOffset}'`);\n      } else {\n        connectionConfig.initSql = `SET time_zone = '${tzOffset}'`;\n      }\n    }\n\n    try {\n      const connection = await this.#lib.createConnection(connectionConfig);\n      this.sequelize.setDatabaseVersion(semver.coerce(connection.serverVersion())!.version);\n\n      debug('connection acquired');\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n          case 'EPIPE':\n          case 'PROTOCOL_CONNECTION_LOST':\n            void this.sequelize.pool.destroy(connection);\n            break;\n          default:\n        }\n      });\n\n      return connection;\n    } catch (error: unknown) {\n      if (!isErrorWithStringCode(error)) {\n        throw error;\n      }\n\n      switch (error.code) {\n        case 'ECONNREFUSED':\n          throw new ConnectionRefusedError(error);\n        case 'ER_ACCESS_DENIED_ERROR':\n        case 'ER_ACCESS_DENIED_NO_PASSWORD_ERROR':\n          throw new AccessDeniedError(error);\n        case 'ENOTFOUND':\n          throw new HostNotFoundError(error);\n        case 'EHOSTUNREACH':\n        case 'ENETUNREACH':\n        case 'EADDRNOTAVAIL':\n          throw new HostNotReachableError(error);\n        case 'EINVAL':\n          throw new InvalidConnectionError(error);\n        default:\n          throw new ConnectionError(error);\n      }\n    }\n  }\n\n  async disconnect(connection: MariaDbConnection) {\n    // Don't disconnect connections with CLOSED state\n    if (!connection.isValid()) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n\n      return;\n    }\n\n    await connection.end();\n  }\n\n  validate(connection: MariaDbConnection): boolean {\n    return connection && connection.isValid();\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kBAQO;AACP,mBAAsC;AACtC,mBAAuC;AACvC,oBAAuB;AACvB,oBAAgC;AAChC,cAAyB;AACzB,oBAAmB;AAGnB,MAAM,QAAQ,qBAAO,aAAa,oBAAoB;AA6C/C,MAAM,iCAAiC,sCAG5C;AAAA,EACS;AAAA,EAET,YAAY,SAAyB;AACnC,UAAM,OAAO;AACb,SAAK,OAAO,QAAQ,QAAQ,iBAAiB;AAAA,EAC/C;AAAA,EAEA,UAAU,OAA0B,MAA4D;AAC9F,UAAM,SAAS,KAAK,QAAQ,6BAA6B,MAAM,IAAI;AAEnE,QAAI,QAAQ;AACV,aAAO,OAAO,KAAK;AAAA,IACrB;AAEA,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,QAAQ,QAAuE;AAEnF,QAAI,WAAW,KAAK,UAAU,QAAQ;AACtC,eAAW,SAAS,SAAS,GAAG,QAAI,qCAAuB,QAAQ,IAAI;AAEvE,UAAM,uBAA6C,+BAAgB;AAAA,MACjE,WAAW;AAAA,MACX,GAAG;AAAA,MACH,UAAU;AAAA,MACV,UAAU,CAAC,OAA0B,SACnC,KAAK,UAAU,OAAO,IAAI;AAAA,IAC9B,CAAC;AAED,QAAI,CAAC,KAAK,UAAU,QAAQ,qBAAqB;AAE/C,UAAI,iBAAiB,SAAS;AAC5B,YAAI,CAAC,MAAM,QAAQ,iBAAiB,OAAO,GAAG;AAC5C,2BAAiB,UAAU,CAAC,iBAAiB,OAAO;AAAA,QACtD;AAEA,yBAAiB,QAAQ,KAAK,oBAAoB,WAAW;AAAA,MAC/D,OAAO;AACL,yBAAiB,UAAU,oBAAoB;AAAA,MACjD;AAAA,IACF;AAEA,QAAI;AACF,YAAM,aAAa,MAAM,KAAK,KAAK,iBAAiB,gBAAgB;AACpE,WAAK,UAAU,mBAAmB,cAAAA,QAAO,OAAO,WAAW,cAAc,CAAC,EAAG,OAAO;AAEpF,YAAM,qBAAqB;AAC3B,iBAAW,GAAG,SAAS,WAAS;AAC9B,gBAAQ,MAAM,MAAM;AAAA,UAClB,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACH,iBAAK,KAAK,UAAU,KAAK,QAAQ,UAAU;AAC3C;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAED,aAAO;AAAA,IACT,SAAS,OAAP;AACA,UAAI,KAAC,oCAAsB,KAAK,GAAG;AACjC,cAAM;AAAA,MACR;AAEA,cAAQ,MAAM,MAAM;AAAA,QAClB,KAAK;AACH,gBAAM,IAAI,mCAAuB,KAAK;AAAA,QACxC,KAAK;AAAA,QACL,KAAK;AACH,gBAAM,IAAI,8BAAkB,KAAK;AAAA,QACnC,KAAK;AACH,gBAAM,IAAI,8BAAkB,KAAK;AAAA,QACnC,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,gBAAM,IAAI,kCAAsB,KAAK;AAAA,QACvC,KAAK;AACH,gBAAM,IAAI,mCAAuB,KAAK;AAAA,QACxC;AACE,gBAAM,IAAI,4BAAgB,KAAK;AAAA,MACnC;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,WAAW,YAA+B;AAE9C,QAAI,CAAC,WAAW,QAAQ,GAAG;AACzB,YAAM,gEAAgE;AAEtE;AAAA,IACF;AAEA,UAAM,WAAW,IAAI;AAAA,EACvB;AAAA,EAEA,SAAS,YAAwC;AAC/C,WAAO,cAAc,WAAW,QAAQ;AAAA,EAC1C;AACF;",
  "names": ["semver"]
}
