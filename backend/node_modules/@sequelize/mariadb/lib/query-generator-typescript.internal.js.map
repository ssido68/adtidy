{
  "version": 3,
  "sources": ["../src/query-generator-typescript.internal.ts"],
  "sourcesContent": ["import type {\n  Expression,\n  ListSchemasQueryOptions,\n  ListTablesQueryOptions,\n  RemoveIndexQueryOptions,\n  ShowConstraintsQueryOptions,\n  TableOrModel,\n  TruncateTableQueryOptions,\n} from '@sequelize/core';\nimport { AbstractQueryGenerator, Op } from '@sequelize/core';\nimport type { EscapeOptions } from '@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/query-generator-typescript.js';\nimport {\n  REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,\n  TRUNCATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,\n} from '@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/query-generator-typescript.js';\nimport { rejectInvalidOptions } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/check.js';\nimport { joinSQLFragments } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/join-sql-fragments.js';\nimport { buildJsonPath } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/json.js';\nimport { EMPTY_SET } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/object.js';\nimport { generateIndexName } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/string.js';\nimport type { MariaDbDialect } from './dialect.js';\nimport { MariaDbQueryGeneratorInternal } from './query-generator.internal.js';\n\nconst REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS = new Set<keyof RemoveIndexQueryOptions>(['ifExists']);\n\n/**\n * Temporary class to ease the TypeScript migration\n */\nexport class MariaDbQueryGeneratorTypeScript extends AbstractQueryGenerator {\n  readonly #internals: MariaDbQueryGeneratorInternal;\n\n  constructor(\n    dialect: MariaDbDialect,\n    internals: MariaDbQueryGeneratorInternal = new MariaDbQueryGeneratorInternal(dialect),\n  ) {\n    super(dialect, internals);\n\n    internals.whereSqlBuilder.setOperatorKeyword(Op.regexp, 'REGEXP');\n    internals.whereSqlBuilder.setOperatorKeyword(Op.notRegexp, 'NOT REGEXP');\n\n    this.#internals = internals;\n  }\n\n  listSchemasQuery(options?: ListSchemasQueryOptions) {\n    let schemasToSkip = this.#internals.getTechnicalSchemaNames();\n\n    if (options && Array.isArray(options?.skip)) {\n      schemasToSkip = [...schemasToSkip, ...options.skip];\n    }\n\n    return joinSQLFragments([\n      'SELECT SCHEMA_NAME AS `schema`',\n      'FROM INFORMATION_SCHEMA.SCHEMATA',\n      `WHERE SCHEMA_NAME NOT IN (${schemasToSkip.map(schema => this.escape(schema)).join(', ')})`,\n    ]);\n  }\n\n  describeTableQuery(tableName: TableOrModel) {\n    return `SHOW FULL COLUMNS FROM ${this.quoteTable(tableName)};`;\n  }\n\n  listTablesQuery(options?: ListTablesQueryOptions) {\n    return joinSQLFragments([\n      'SELECT TABLE_NAME AS `tableName`,',\n      'TABLE_SCHEMA AS `schema`',\n      `FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'`,\n      options?.schema\n        ? `AND TABLE_SCHEMA = ${this.escape(options.schema)}`\n        : `AND TABLE_SCHEMA NOT IN (${this.#internals\n            .getTechnicalSchemaNames()\n            .map(schema => this.escape(schema))\n            .join(', ')})`,\n      'ORDER BY TABLE_SCHEMA, TABLE_NAME',\n    ]);\n  }\n\n  truncateTableQuery(tableName: TableOrModel, options?: TruncateTableQueryOptions) {\n    if (options) {\n      rejectInvalidOptions(\n        'truncateTableQuery',\n        this.dialect,\n        TRUNCATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,\n        EMPTY_SET,\n        options,\n      );\n    }\n\n    return `TRUNCATE ${this.quoteTable(tableName)}`;\n  }\n\n  showConstraintsQuery(tableName: TableOrModel, options?: ShowConstraintsQueryOptions) {\n    const table = this.extractTableDetails(tableName);\n\n    return joinSQLFragments([\n      'SELECT c.CONSTRAINT_SCHEMA AS constraintSchema,',\n      'c.CONSTRAINT_NAME AS constraintName,',\n      'c.CONSTRAINT_TYPE AS constraintType,',\n      'c.TABLE_SCHEMA AS tableSchema,',\n      'c.TABLE_NAME AS tableName,',\n      'kcu.COLUMN_NAME AS columnNames,',\n      'kcu.REFERENCED_TABLE_SCHEMA AS referencedTableSchema,',\n      'kcu.REFERENCED_TABLE_NAME AS referencedTableName,',\n      'kcu.REFERENCED_COLUMN_NAME AS referencedColumnNames,',\n      'r.DELETE_RULE AS deleteAction,',\n      'r.UPDATE_RULE AS updateAction,',\n      'ch.CHECK_CLAUSE AS definition',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS c',\n      'LEFT JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS r ON c.CONSTRAINT_CATALOG = r.CONSTRAINT_CATALOG',\n      'AND c.CONSTRAINT_SCHEMA = r.CONSTRAINT_SCHEMA AND c.CONSTRAINT_NAME = r.CONSTRAINT_NAME AND c.TABLE_NAME = r.TABLE_NAME',\n      'LEFT JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu ON c.CONSTRAINT_CATALOG = kcu.CONSTRAINT_CATALOG',\n      'AND c.CONSTRAINT_SCHEMA = kcu.CONSTRAINT_SCHEMA AND c.CONSTRAINT_NAME = kcu.CONSTRAINT_NAME AND c.TABLE_NAME = kcu.TABLE_NAME',\n      'LEFT JOIN INFORMATION_SCHEMA.CHECK_CONSTRAINTS ch ON c.CONSTRAINT_CATALOG = ch.CONSTRAINT_CATALOG',\n      'AND c.CONSTRAINT_SCHEMA = ch.CONSTRAINT_SCHEMA AND c.CONSTRAINT_NAME = ch.CONSTRAINT_NAME',\n      `WHERE c.TABLE_NAME = ${this.escape(table.tableName)}`,\n      `AND c.TABLE_SCHEMA = ${this.escape(table.schema)}`,\n      options?.columnName ? `AND kcu.COLUMN_NAME = ${this.escape(options.columnName)}` : '',\n      options?.constraintName\n        ? `AND c.CONSTRAINT_NAME = ${this.escape(options.constraintName)}`\n        : '',\n      options?.constraintType\n        ? `AND c.CONSTRAINT_TYPE = ${this.escape(options.constraintType)}`\n        : '',\n      'ORDER BY c.CONSTRAINT_NAME, kcu.ORDINAL_POSITION',\n    ]);\n  }\n\n  showIndexesQuery(tableName: TableOrModel) {\n    return `SHOW INDEX FROM ${this.quoteTable(tableName)}`;\n  }\n\n  removeIndexQuery(\n    tableName: TableOrModel,\n    indexNameOrAttributes: string | string[],\n    options?: RemoveIndexQueryOptions,\n  ) {\n    if (options) {\n      rejectInvalidOptions(\n        'removeIndexQuery',\n        this.dialect,\n        REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,\n        REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    let indexName;\n    if (Array.isArray(indexNameOrAttributes)) {\n      const table = this.extractTableDetails(tableName);\n      indexName = generateIndexName(table, { fields: indexNameOrAttributes });\n    } else {\n      indexName = indexNameOrAttributes;\n    }\n\n    return joinSQLFragments([\n      'DROP INDEX',\n      options?.ifExists ? 'IF EXISTS' : '',\n      this.quoteIdentifier(indexName),\n      'ON',\n      this.quoteTable(tableName),\n    ]);\n  }\n\n  getToggleForeignKeyChecksQuery(enable: boolean): string {\n    return `SET FOREIGN_KEY_CHECKS=${enable ? '1' : '0'}`;\n  }\n\n  jsonPathExtractionQuery(\n    sqlExpression: string,\n    path: ReadonlyArray<number | string>,\n    unquote: boolean,\n  ): string {\n    const extractQuery = `json_extract(${sqlExpression},${this.escape(buildJsonPath(path))})`;\n\n    if (unquote) {\n      return `json_unquote(${extractQuery})`;\n    }\n\n    // MariaDB has a very annoying behavior with json_extract: It returns the JSON value as a proper JSON string (e.g. `true` or `null` instead true or null)\n    // Except if the value is going to be used in a comparison, in which case it unquotes it automatically (even if we did not call JSON_UNQUOTE).\n    // This is a problem because it makes it impossible to distinguish between a JSON text `true` and a JSON boolean true.\n    // This useless function call is here to make mariadb not think the value will be used in a comparison, and thus not unquote it.\n    // We could replace it with a custom function that does nothing, but this would require a custom function to be created on the database ahead of time.\n    return `json_compact(${extractQuery})`;\n  }\n\n  formatUnquoteJson(arg: Expression, options?: EscapeOptions) {\n    return `json_unquote(${this.escape(arg, options)})`;\n  }\n\n  versionQuery() {\n    return 'SELECT VERSION() as `version`';\n  }\n\n  getUuidV1FunctionCall(): string {\n    return 'UUID()';\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
