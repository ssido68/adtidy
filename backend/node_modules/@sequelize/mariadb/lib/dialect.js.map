{
  "version": 3,
  "sources": ["../src/dialect.ts"],
  "sourcesContent": ["import type { Sequelize } from '@sequelize/core';\nimport { AbstractDialect } from '@sequelize/core';\nimport type { SupportableNumericOptions } from '@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/dialect.js';\nimport { parseCommonConnectionUrlOptions } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/connection-options.js';\nimport {\n  createUnspecifiedOrderedBindCollector,\n  escapeMysqlMariaDbString,\n} from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/sql.js';\nimport { getSynchronizedTypeKeys } from '@sequelize/utils';\nimport {\n  BOOLEAN_CONNECTION_OPTION_NAMES,\n  CONNECTION_OPTION_NAMES,\n  NUMBER_CONNECTION_OPTION_NAMES,\n  STRING_CONNECTION_OPTION_NAMES,\n} from './_internal/connection-options.js';\nimport { registerMariaDbDbDataTypeParsers } from './_internal/data-types-db.js';\nimport * as DataTypes from './_internal/data-types-overrides.js';\nimport type { MariaDbConnectionOptions, MariaDbModule } from './connection-manager.js';\nimport { MariaDbConnectionManager } from './connection-manager.js';\nimport { MariaDbQueryGenerator } from './query-generator.js';\nimport { MariaDbQueryInterface } from './query-interface.js';\nimport { MariaDbQuery } from './query.js';\n\nexport interface MariaDbDialectOptions {\n  /**\n   * The mariadb library to use.\n   * If not provided, the mariadb npm library will be used.\n   * Must be compatible with the mariadb npm library API.\n   *\n   * Using this option should only be considered as a last resort,\n   * as the Sequelize team cannot guarantee its compatibility.\n   */\n  mariaDbModule?: MariaDbModule;\n\n  /**\n   * Show warnings if there are any when executing a query\n   */\n  showWarnings?: boolean | undefined;\n}\n\nconst DIALECT_OPTION_NAMES = getSynchronizedTypeKeys<MariaDbDialectOptions>({\n  mariaDbModule: undefined,\n  showWarnings: undefined,\n});\n\nconst numericOptions: SupportableNumericOptions = {\n  zerofill: true,\n  unsigned: true,\n};\n\nexport class MariaDbDialect extends AbstractDialect<\n  MariaDbDialectOptions,\n  MariaDbConnectionOptions\n> {\n  static supports = AbstractDialect.extendSupport({\n    'VALUES ()': true,\n    'LIMIT ON UPDATE': true,\n    lock: true,\n    forShare: 'LOCK IN SHARE MODE',\n    settingIsolationLevelDuringTransaction: false,\n    schemas: true,\n    inserts: {\n      ignoreDuplicates: ' IGNORE',\n      updateOnDuplicate: ' ON DUPLICATE KEY UPDATE',\n    },\n    index: {\n      collate: false,\n      length: true,\n      parser: true,\n      type: true,\n      using: 1,\n    },\n    constraints: {\n      foreignKeyChecksDisableable: true,\n      removeOptions: { ifExists: true },\n    },\n    indexViaAlter: true,\n    indexHints: true,\n    dataTypes: {\n      COLLATE_BINARY: true,\n      GEOMETRY: true,\n      INTS: numericOptions,\n      FLOAT: { ...numericOptions, scaleAndPrecision: true },\n      REAL: { ...numericOptions, scaleAndPrecision: true },\n      DOUBLE: { ...numericOptions, scaleAndPrecision: true },\n      DECIMAL: numericOptions,\n      JSON: true,\n    },\n    REGEXP: true,\n    jsonOperations: true,\n    jsonExtraction: {\n      unquoted: true,\n      quoted: true,\n    },\n    uuidV1Generation: true,\n    globalTimeZoneConfig: true,\n    removeColumn: {\n      ifExists: true,\n    },\n    createSchema: {\n      charset: true,\n      collate: true,\n      // TODO [>=2024-06-19]: uncomment when MariaDB 10.5 is oldest supported version\n      // comment: true,\n      ifNotExists: true,\n      replace: true,\n    },\n    dropSchema: {\n      ifExists: true,\n    },\n    startTransaction: {\n      readOnly: true,\n    },\n  });\n\n  readonly queryGenerator: MariaDbQueryGenerator;\n  readonly connectionManager: MariaDbConnectionManager;\n  readonly queryInterface: MariaDbQueryInterface;\n\n  readonly Query = MariaDbQuery;\n\n  constructor(sequelize: Sequelize, options: MariaDbDialectOptions) {\n    super({\n      dataTypesDocumentationUrl: 'https://mariadb.com/kb/en/library/resultset/#field-types',\n      identifierDelimiter: '`',\n      minimumDatabaseVersion: '10.4.30',\n      name: 'mariadb',\n      options,\n      sequelize,\n      dataTypeOverrides: DataTypes,\n    });\n\n    this.connectionManager = new MariaDbConnectionManager(this);\n    this.queryGenerator = new MariaDbQueryGenerator(this);\n    this.queryInterface = new MariaDbQueryInterface(this);\n\n    registerMariaDbDbDataTypeParsers(this);\n  }\n\n  createBindCollector() {\n    return createUnspecifiedOrderedBindCollector();\n  }\n\n  escapeString(value: string) {\n    return escapeMysqlMariaDbString(value);\n  }\n\n  canBackslashEscape() {\n    return true;\n  }\n\n  getDefaultSchema(): string {\n    return this.sequelize.options.replication.write.database ?? '';\n  }\n\n  parseConnectionUrl(url: string): MariaDbConnectionOptions {\n    return parseCommonConnectionUrlOptions<MariaDbConnectionOptions>({\n      url: new URL(url),\n      allowedProtocols: ['mariadb'],\n      hostname: 'host',\n      port: 'port',\n      pathname: 'database',\n      username: 'user',\n      password: 'password',\n      stringSearchParams: STRING_CONNECTION_OPTION_NAMES,\n      booleanSearchParams: BOOLEAN_CONNECTION_OPTION_NAMES,\n      numberSearchParams: NUMBER_CONNECTION_OPTION_NAMES,\n    });\n  }\n\n  static getSupportedOptions() {\n    return DIALECT_OPTION_NAMES;\n  }\n\n  static getSupportedConnectionOptions() {\n    return CONNECTION_OPTION_NAMES;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kBAAgC;AAEhC,gCAAgD;AAChD,iBAGO;AACP,mBAAwC;AACxC,IAAAA,6BAKO;AACP,2BAAiD;AACjD,gBAA2B;AAE3B,gCAAyC;AACzC,6BAAsC;AACtC,6BAAsC;AACtC,mBAA6B;AAmB7B,MAAM,2BAAuB,sCAA+C;AAAA,EAC1E,eAAe;AAAA,EACf,cAAc;AAChB,CAAC;AAED,MAAM,iBAA4C;AAAA,EAChD,UAAU;AAAA,EACV,UAAU;AACZ;AAEO,MAAM,uBAAuB,4BAGlC;AAAA,EACA,OAAO,WAAW,4BAAgB,cAAc;AAAA,IAC9C,aAAa;AAAA,IACb,mBAAmB;AAAA,IACnB,MAAM;AAAA,IACN,UAAU;AAAA,IACV,wCAAwC;AAAA,IACxC,SAAS;AAAA,IACT,SAAS;AAAA,MACP,kBAAkB;AAAA,MAClB,mBAAmB;AAAA,IACrB;AAAA,IACA,OAAO;AAAA,MACL,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,IACT;AAAA,IACA,aAAa;AAAA,MACX,6BAA6B;AAAA,MAC7B,eAAe,EAAE,UAAU,KAAK;AAAA,IAClC;AAAA,IACA,eAAe;AAAA,IACf,YAAY;AAAA,IACZ,WAAW;AAAA,MACT,gBAAgB;AAAA,MAChB,UAAU;AAAA,MACV,MAAM;AAAA,MACN,OAAO,EAAE,GAAG,gBAAgB,mBAAmB,KAAK;AAAA,MACpD,MAAM,EAAE,GAAG,gBAAgB,mBAAmB,KAAK;AAAA,MACnD,QAAQ,EAAE,GAAG,gBAAgB,mBAAmB,KAAK;AAAA,MACrD,SAAS;AAAA,MACT,MAAM;AAAA,IACR;AAAA,IACA,QAAQ;AAAA,IACR,gBAAgB;AAAA,IAChB,gBAAgB;AAAA,MACd,UAAU;AAAA,MACV,QAAQ;AAAA,IACV;AAAA,IACA,kBAAkB;AAAA,IAClB,sBAAsB;AAAA,IACtB,cAAc;AAAA,MACZ,UAAU;AAAA,IACZ;AAAA,IACA,cAAc;AAAA,MACZ,SAAS;AAAA,MACT,SAAS;AAAA;AAAA;AAAA,MAGT,aAAa;AAAA,MACb,SAAS;AAAA,IACX;AAAA,IACA,YAAY;AAAA,MACV,UAAU;AAAA,IACZ;AAAA,IACA,kBAAkB;AAAA,MAChB,UAAU;AAAA,IACZ;AAAA,EACF,CAAC;AAAA,EAEQ;AAAA,EACA;AAAA,EACA;AAAA,EAEA,QAAQ;AAAA,EAEjB,YAAY,WAAsB,SAAgC;AAChE,UAAM;AAAA,MACJ,2BAA2B;AAAA,MAC3B,qBAAqB;AAAA,MACrB,wBAAwB;AAAA,MACxB,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA,mBAAmB;AAAA,IACrB,CAAC;AAED,SAAK,oBAAoB,IAAI,mDAAyB,IAAI;AAC1D,SAAK,iBAAiB,IAAI,6CAAsB,IAAI;AACpD,SAAK,iBAAiB,IAAI,6CAAsB,IAAI;AAEpD,+DAAiC,IAAI;AAAA,EACvC;AAAA,EAEA,sBAAsB;AACpB,eAAO,kDAAsC;AAAA,EAC/C;AAAA,EAEA,aAAa,OAAe;AAC1B,eAAO,qCAAyB,KAAK;AAAA,EACvC;AAAA,EAEA,qBAAqB;AACnB,WAAO;AAAA,EACT;AAAA,EAEA,mBAA2B;AACzB,WAAO,KAAK,UAAU,QAAQ,YAAY,MAAM,YAAY;AAAA,EAC9D;AAAA,EAEA,mBAAmB,KAAuC;AACxD,eAAO,2DAA0D;AAAA,MAC/D,KAAK,IAAI,IAAI,GAAG;AAAA,MAChB,kBAAkB,CAAC,SAAS;AAAA,MAC5B,UAAU;AAAA,MACV,MAAM;AAAA,MACN,UAAU;AAAA,MACV,UAAU;AAAA,MACV,UAAU;AAAA,MACV,oBAAoB;AAAA,MACpB,qBAAqB;AAAA,MACrB,oBAAoB;AAAA,IACtB,CAAC;AAAA,EACH;AAAA,EAEA,OAAO,sBAAsB;AAC3B,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,gCAAgC;AACrC,WAAO;AAAA,EACT;AACF;",
  "names": ["import_connection_options"]
}
