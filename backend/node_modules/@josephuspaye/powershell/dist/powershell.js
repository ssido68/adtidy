"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.commandsAsScript = exports.command = void 0;
const os_1 = require("os");
const child_process_1 = require("child_process");
/**
 * Run the given PowerShell command, and optionally convert the results to JSON, CSV, or HTML.
 */
async function command(command, options) {
    const { convertTo, ensureJsonArray } = Object.assign({}, { convertTo: 'none', ensureJsonArray: false }, options);
    const converters = {
        json: ' | ConvertTo-Json',
        csv: ' | ConvertTo-Csv',
        html: ' | ConvertTo-Html',
    };
    command += converters[convertTo] || '';
    const { stdout, stderr, exitCode } = await execAsPromised([
        'powershell.exe',
        '-NonInteractive',
        '-NoProfile',
        '-command',
        `"${command.replace(/"/g, '\\"')}"`,
    ].join(' '), options === null || options === void 0 ? void 0 : options.useChildProcess);
    let result;
    if (convertTo === 'json') {
        if (stdout.length > 0) {
            const json = JSON.parse(stdout);
            result = ensureJsonArray ? array(json) : json;
        }
        else {
            result = ensureJsonArray ? [] : undefined;
        }
    }
    else {
        result = stdout;
    }
    return { stdout, stderr, exitCode, result };
}
exports.command = command;
/**
 * Run the given PowerShell commands from a script file and get the output as a string
 */
async function commandsAsScript(commands, useChildProcess) {
    const { stdout, stderr, exitCode } = await execAsPromised([
        'powershell.exe',
        '-NonInteractive',
        '-NoProfile',
        '-command',
        '-',
    ].join(' '), (child) => {
        var _a;
        (_a = child.stdin) === null || _a === void 0 ? void 0 : _a.write(commands + os_1.EOL + ';exit $LASTEXITCODE;' + os_1.EOL);
        if (useChildProcess) {
            useChildProcess(child);
        }
    });
    return { stdout, stderr, exitCode };
}
exports.commandsAsScript = commandsAsScript;
/**
 * Ensure the given value is an array
 */
function array(value) {
    return Array.isArray(value) ? value : value !== undefined ? [value] : [];
}
/**
 * A Promise wrapper around child_process.exec()
 */
function execAsPromised(command, useChildProcess) {
    return new Promise((resolve, reject) => {
        const child = child_process_1.exec(command, (err, stdout, stderr) => {
            if (err) {
                reject(err);
            }
            resolve({
                stdout: stdout.trim(),
                stderr: stderr.trim(),
                exitCode: child.exitCode,
            });
        });
        if (useChildProcess !== undefined) {
            useChildProcess(child);
        }
    });
}
